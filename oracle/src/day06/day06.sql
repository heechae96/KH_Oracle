-- ROLLUP과 CUBE

-- null 포함 x
SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE
ORDER BY 1;

-- null 포함
-- 인자가 한 개인 경우 차이가 없음
SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE)
ORDER BY 1;

SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(JOB_CODE)
ORDER BY 1;

-- 부서 내 직급별 급여 합계
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY 1;

SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- 집합연산자
-- (∩_∩ ), (∪_∪ ), -, A
-- A = {1, 2, 4 }, B = { 2, 5, 7 }
-- A∩B = { 2 }? --------------> 교집합
-- A∪B = {1, 2, 4, 5, 7 }?----> 합집합
-- A-B = {1, 4 }?--------------> 차집합
-- A - A∩B = { 1, 4 }
-- 교집합 -> INTERSECT
-- 합집합 -> UNION, UNION ALL
-- 차집합 -> MINUS

SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5';
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- 교집합 연산
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5'
INTERSECT
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- 합집합1(중복 허용)
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5'
UNION ALL
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- 합집합2(중복 제거)
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5'
UNION
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- 차집합
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5'
MINUS
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- UNION의 조건
-- SELECT문의 컬럼 갯수가 반드시 같아야함
-- 컬럼의 데이터 타입이 반드시 같거나 변환가능해야함
-- ex. CHAR → VARCHAR2
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE DEPT_CODE='D5'
UNION
SELECT EMP_NAME, EMP_ID FROM EMPLOYEE WHERE SALARY >= 2400000;

-- JOIN
-- SELECT 컬럼명 FROM 테이블 JOIN 테이블 ON 컬럼명1 = 컬럼명2
SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE;
SELECT DEPT_ID, DEPT_TITLE FROM DEPARTMENT;

-- ANSI표준
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

-- 오라클 전용
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT WHERE DEPT_CODE = DEPT_ID;

-- JOIN의 종류1
-- 1. Equi-JOIN : 일반적으로 사용, =에 의한 조인
-- 2. NON-Equi JOIN : 동등조건이 아닌 BETWEEN AND, IS NULL, IS NOT NULL, IN, NOT IN 등으로 사용

-- @실습문제
--1. 부서명과 지역명을 출력하세요. DEPARTMENT, LOCATION 테이블 이용.
-- 두 테이블 모두 LOCAL ID또는 CODE가 있다
--SELECT * FROM DEPARTMENT;
--SELECT * FROM LOCATION;

SELECT DEPT_TITLE "부서명", LOCAL_NAME "지역명"
FROM DEPARTMENT JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;

--2. 사원명과 직급명을 출력하세요. EMPLOYEE, JOB 테이블 이용
-- JOB_CODE를 둘 다 가지고 있음
--SELECT * FROM EMPLOYEE;
--SELECT * FROM JOB;

-- 모호함을 해결 방법1
SELECT EMP_NAME "사원명", JOB_NAME "직급명"
FROM EMPLOYEE JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

-- 모호함 해결 방법2
SELECT EMP_NAME "사원명", JOB_NAME "직급명"
FROM EMPLOYEE EMP JOIN JOB JB
ON EMP.JOB_CODE = JB.JOB_CODE;

-- 모호함 해결 방법3
-- 수업에선 이 방법을 사용 할 것
SELECT EMP_NAME "사원명", JOB_NAME "직급명"
FROM EMPLOYEE
JOIN JOB
USING(JOB_CODE);


-- 3. 지역명과 국가명을 출력하세요. LOCATION, NATIONAL 테이블 이용
SELECT LOCAL_NAME "지역명", NATIONAL_NAME "국가명"
FROM LOCATION JOIN NATIONAL USING(NATIONAL_CODE);

SELECT LOCAL_NAME "지역명", NATIONAL_NAME "국가명"
FROM NATIONAL JOIN LOCATION USING(NATIONAL_CODE);

-- JOIN의 종류2
-- 1. INNER JOIN(내부조인) : 일반적으로 사용하는 조인(교집합)
-- 2. OUTTER JOIN(외부조인) : 합집합, 모두 출력
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

-- ANSI표준
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE RIGHT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE FULL JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

-- 오라클
-- +를 안붙인것 기준
-- FULL은 오라클 전용 구문 없음
-- LEFT JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT WHERE DEPT_CODE = DEPT_ID(+);
-- RIGHT JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT WHERE DEPT_CODE(+) = DEPT_ID;


-- EX) OUTTER JOIN(외부조인)조인을 살펴보자
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

-- 1, 2는 다른 결과!!
-- 테이블 순서를 바꾸면 결과가 달라짐
-- 1
SELECT EMP_NAME, DEPT_TITLE
FROM DEPARTMENT RIGHT JOIN EMPLOYEE ON DEPT_ID = DEPT_CODE;

-- 2
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE RIGHT JOIN DEPARTMENT ON DEPT_ID = DEPT_CODE;


-- JOIN의 종류3
-- 1. 상호조인(CROSS JOIN)
-- 2. 셀프조인(SELF JOIN)
-- 3. 다중조인
--      여러개의 조인문을 한번에 사용 가능
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;

--@실습문제
-- 1. 직급이 대리이면서, ASIA 지역에 근무하는 직원 조회
-- 사번, 이름 ,직급명, 부서명, 근무지역명, 급여를 조회하시오
SELECT EMP_ID "사번", EMP_NAME "이름", JOB_NAME "직급명", DEPT_TITLE "부서명", LOCAL_NAME"근무지역명", SALARY "급여"
-- 처음 테이블은 가장 정보를 많이 가지고 있는것으로 설정!
FROM EMPLOYEE
--JOIN JOB USING(JOB_CODE)
--JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
--JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
--
--JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
--JOIN JOB USING(JOB_CODE)
--JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
--
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME = '대리' AND LOCAL_NAME LIKE 'ASIA%';